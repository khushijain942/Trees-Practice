class Solution {
public:
    bool isLeaf(Node* root)
    {
        if(!root->left && !root->right)
            return true;
        return false;
    }
    void leftBoundary(Node* root,vector<int> &res)
    {
        Node* cur=root->left;
        while(cur)
        {
            if(!isLeaf(cur))
                res.push_back(cur->data);
            if(cur->left)
                cur=cur->left;
            else
                cur=cur->right;
        }
    }
    void leaf(Node* root,vector<int> &res)
    {
        if(isLeaf(root))
        {
            res.push_back(root->data);
            return;
        }
        if(root->left)
            leaf(root->left,res);
        if(root->right)
            leaf(root->right,res);
    }
    void rightBoundary(Node* root,vector<int> &res)
    {
        Node* cur=root->right;
        vector<int> temp;
        while(cur)
        {
            if(!isLeaf(cur))
                temp.push_back(cur->data);
            if(cur->right)
                cur=cur->right;
            else
                cur=cur->left;
        }
        for(int i=temp.size()-1;i>=0;i--)
            res.push_back(temp[i]);
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> res;
        if(root==NULL)
            return res;
        if(!isLeaf(root))
            res.push_back(root->data);
        leftBoundary(root,res);
        leaf(root,res);
        rightBoundary(root,res);
        return res;
    }
};
